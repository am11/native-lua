#!/usr/bin/env python3
# encoding: utf-8

import os

from waflib import Logs

def build(bld):
    bld.env.sources_basepath = os.path.join('lua-5.3.4', 'src')
    bld.env.sources = ' '.join([
        os.path.join(bld.env.sources_basepath, 'lapi.c'),
        os.path.join(bld.env.sources_basepath, 'lcode.c'),
        os.path.join(bld.env.sources_basepath, 'ldo.c'),
        os.path.join(bld.env.sources_basepath, 'lctype.c'),
        os.path.join(bld.env.sources_basepath, 'ldebug.c'),
        os.path.join(bld.env.sources_basepath, 'ldump.c'),
        os.path.join(bld.env.sources_basepath, 'lfunc.c'),
        os.path.join(bld.env.sources_basepath, 'lgc.c'),
        os.path.join(bld.env.sources_basepath, 'llex.c'),
        os.path.join(bld.env.sources_basepath, 'lmem.c'),
        os.path.join(bld.env.sources_basepath, 'lobject.c'),
        os.path.join(bld.env.sources_basepath, 'lopcodes.c'),
        os.path.join(bld.env.sources_basepath, 'lparser.c'),
        os.path.join(bld.env.sources_basepath, 'lstate.c'),
        os.path.join(bld.env.sources_basepath, 'lstring.c'),
        os.path.join(bld.env.sources_basepath, 'ltable.c'),
        os.path.join(bld.env.sources_basepath, 'ltm.c'),
        os.path.join(bld.env.sources_basepath, 'lundump.c'),
        os.path.join(bld.env.sources_basepath, 'lvm.c'),
        os.path.join(bld.env.sources_basepath, 'lzio.c'),
        os.path.join(bld.env.sources_basepath, 'lauxlib.c'),
        os.path.join(bld.env.sources_basepath, 'lbaselib.c'),
        os.path.join(bld.env.sources_basepath, 'lbitlib.c'),
        os.path.join(bld.env.sources_basepath, 'lcorolib.c'),
        os.path.join(bld.env.sources_basepath, 'ldblib.c'),
        os.path.join(bld.env.sources_basepath, 'liolib.c'),
        os.path.join(bld.env.sources_basepath, 'lmathlib.c'),
        os.path.join(bld.env.sources_basepath, 'loslib.c'),
        os.path.join(bld.env.sources_basepath, 'lstrlib.c'),
        os.path.join(bld.env.sources_basepath, 'ltablib.c'),
        os.path.join(bld.env.sources_basepath, 'lutf8lib.c'),
        os.path.join(bld.env.sources_basepath, 'loadlib.c'),
        os.path.join(bld.env.sources_basepath, 'linit.c')])
    bld.env.source_interpreter = os.path.join(bld.env.sources_basepath,
                                              'lua.c')
    bld.env.source_compiler = os.path.join(bld.env.sources_basepath,
                                           'luac.c')

    if bld.env.host_os == 'aix':
        build_aix(bld)
    elif bld.env.host_os in ('netbsd', 'openbsd'):
        build_netbsd_or_openbsd(bld)
    elif bld.env.host_os == 'freebsd':
        build_freebsd(bld)
    elif bld.env.host_os == 'linux':
        build_linux(bld)
    elif bld.env.host_os == 'darwin':
        build_darwin(bld)
    elif bld.env.host_os == 'win32':
        build_win32(bld)
    elif bld.env.host_os == 'cygwin':
        build_cygwin(bld)
    elif bld.env.host_os == 'solaris':
        bld.cygwin(bld)
    else:
        bld.fatal('TODO')

def build_aix(bld):
    bld.fatal('TODO')

def build_netbsd_or_openbsd(bld):
    bld.fatal('TODO')

def build_freebsd(bld):
    bld.fatal('TODO')

def build_linux(bld):
    use = ['M', 'DL', 'READLINE']
    defines = ['LUA_COMPAT_5_2', 'LUA_USE_LINUX']
    bld.stlib(source=bld.env.sources,
              target='lua',
              defines=defines,
              name='static-lua-library')
    bld.program(source=bld.env.source_interpreter,
                target='lua',
                defines=defines,
                use=['static-lua-library']+use)
    bld.program(source=bld.env.source_compiler,
                target='luac',
                defines=defines,
                use=['static-lua-library']+use)

def build_darwin(bld):
    bld.fatal('TODO')

def build_win32(bld):
    """Building on win32 platform
    Useable compilers are:
    - msvc
    - gcc
    - clang
    """
    def build_win32_msvc(bld):
        """Building on win32 with msvc"""
        defines = ['LUA_COMPAT_5_2', '_WIN32']
        bld.stlib(source=bld.env.sources,
                target='lua',
                defines=defines,
                name='static-lua-library')

        bld.shlib(source=bld.env.sources,
                target='luadll',
                defines=defines+['LUA_BUILD_AS_DL'],
                name='shared-lua-library')

        bld.program(source=bld.env.source_interpreter,
                    target='lua',
                    defines=defines,
                    use='shared-lua-library')
        bld.program(source=bld.env.source_compiler,
                target='luac',
                defines=defines,
                use=['static-lua-library']+use)

    def build_win32_gcc(bld):
        pass
    def build_win32_clang(bld):
        pass

    if bld.env.CC_NAME == 'msvc':
        build_win32_msvc(bld)
    elif bld.env.CC_NAME == 'gcc':
        build_win32_gcc(bld)
    elif bld.env.CC_NAME == 'clang':
        build_win32_clang(bld)

def build_cygwin(bld):
    bld.fatal('TODO')

def build_solaris(bld):
    bld.fatal('TODO')
